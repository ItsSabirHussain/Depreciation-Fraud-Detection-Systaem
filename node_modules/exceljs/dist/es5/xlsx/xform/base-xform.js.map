{"version":3,"sources":["../../../../lib/xlsx/xform/base-xform.js"],"names":["SAXStream","require","XmlStream","BaseXform","node","text","name","model","options","map","Object","values","forEach","xform","reset","obj","assign","saxStream","stream","Promise","resolve","reject","abort","error","sax","off","on","unpipe","parseOpen","parseText","parseClose","promise","parse","pipe","xmlStream","render","xml","toXml","value","dflt","always","undefined","toString","toAttribute","attr","parseInt","parseFloat","module","exports"],"mappings":";;;;;;;;AAAA,IAAMA,SAAS,GAAGC,OAAO,CAAC,wBAAD,CAAzB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,wBAAD,CAAzB;AAEA;;AACA;AAEA;;;IACME,S;;;;;;;;;AACJ;AAEA;AACA;;AACQ;AAAsB,KAC5B;AACD;;;;AAEM;AAAwB,KAC7B;AACD;;;8BAESC,I,EAAM,CACd;AACD;;;8BAESC,I,EAAM,CACd;AACD;;;+BAEUC,I,EAAM,CACf;AACD;;;8BAESC,K,EAAOC,O,EAAS,CAEzB,C,CADC;AAGF;;;;4BACQ;AACN;AACA,WAAKD,KAAL,GAAa,IAAb,CAFM,CAIN;;AACA,UAAI,KAAKE,GAAT,EAAc;AACZC,QAAAA,MAAM,CAACC,MAAP,CAAc,KAAKF,GAAnB,EAAwBG,OAAxB,CAAgC,UAAAC,KAAK,EAAI;AACvC,cAAIA,KAAK,YAAYV,SAArB,EAAgC;AAC9BU,YAAAA,KAAK,CAACC,KAAN;AACD,WAFD,MAEO,IAAID,KAAK,CAACA,KAAV,EAAiB;AACtBA,YAAAA,KAAK,CAACA,KAAN,CAAYC,KAAZ;AACD;AACF,SAND;AAOD;AACF;;;+BAEUC,G,EAAK;AACd;AACA,WAAKR,KAAL,GAAaG,MAAM,CAACM,MAAP,CAAc,KAAKT,KAAL,IAAc,EAA5B,EAAgCQ,GAAhC,CAAb;AACD;;;0BAEKE,S,EAAWC,M,EAAQ;AAAA;;AACvB,aAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACtC,YAAMC,KAAK,GAAG,SAARA,KAAQ,CAAAC,KAAK,EAAI;AACrB;AACAN,UAAAA,SAAS,CAACO,GAAV,CAAcC,GAAd,CAAkB,SAAlB;AACAR,UAAAA,SAAS,CAACO,GAAV,CAAcC,GAAd,CAAkB,MAAlB;AACAR,UAAAA,SAAS,CAACO,GAAV,CAAcC,GAAd,CAAkB,UAAlB;AACAR,UAAAA,SAAS,CAACO,GAAV,CAAcC,GAAd,CAAkB,OAAlB;AACAR,UAAAA,SAAS,CAACO,GAAV,CAAcC,GAAd,CAAkB,KAAlB;AACAR,UAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,OAAjB,EAA0B,YAAM,CAAE,CAAlC,EAPqB,CAOgB;;AACrC,cAAIR,MAAJ,EAAY;AACVA,YAAAA,MAAM,CAACS,MAAP,CAAcV,SAAd;AACD;;AACDI,UAAAA,MAAM,CAACE,KAAD,CAAN;AACD,SAZD;;AAcAN,QAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,SAAjB,EAA4B,UAAAtB,IAAI,EAAI;AAClC,cAAI;AACF,YAAA,KAAI,CAACwB,SAAL,CAAexB,IAAf;AACD,WAFD,CAEE,OAAOmB,KAAP,EAAc;AACdD,YAAAA,KAAK,CAACC,KAAD,CAAL;AACD;AACF,SAND;AAOAN,QAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,MAAjB,EAAyB,UAAArB,IAAI,EAAI;AAC/B,cAAI;AACF,YAAA,KAAI,CAACwB,SAAL,CAAexB,IAAf;AACD,WAFD,CAEE,OAAOkB,KAAP,EAAc;AACdD,YAAAA,KAAK,CAACC,KAAD,CAAL;AACD;AACF,SAND;AAOAN,QAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,UAAjB,EAA6B,UAAAtB,IAAI,EAAI;AACnC,cAAI;AACF,gBAAI,CAAC,KAAI,CAAC0B,UAAL,CAAgB1B,IAAI,CAACE,IAArB,CAAL,EAAiC;AAC/Bc,cAAAA,OAAO,CAAC,KAAI,CAACb,KAAN,CAAP;AACD;AACF,WAJD,CAIE,OAAOgB,KAAP,EAAc;AACdD,YAAAA,KAAK,CAACC,KAAD,CAAL;AACD;AACF,SARD;AASAN,QAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,KAAjB,EAAwB,YAAM;AAC5BN,UAAAA,OAAO,CAAC,KAAI,CAACb,KAAN,CAAP;AACD,SAFD;AAGAU,QAAAA,SAAS,CAACO,GAAV,CAAcE,EAAd,CAAiB,OAAjB,EAA0B,UAAAH,KAAK,EAAI;AACjCD,UAAAA,KAAK,CAACC,KAAD,CAAL;AACD,SAFD;AAGD,OA5CM,CAAP;AA6CD;;;gCAEWL,M,EAAQ;AAClB,UAAMD,SAAS,GAAG,IAAIjB,SAAJ,EAAlB;AACA,UAAM+B,OAAO,GAAG,KAAKC,KAAL,CAAWf,SAAX,EAAsBC,MAAtB,CAAhB;AACAA,MAAAA,MAAM,CAACe,IAAP,CAAYhB,SAAZ;AAEA,aAAOc,OAAP;AACD;;;0BAQKxB,K,EAAO;AACX,UAAM2B,SAAS,GAAG,IAAIhC,SAAJ,EAAlB;AACA,WAAKiC,MAAL,CAAYD,SAAZ,EAAuB3B,KAAvB;AACA,aAAO2B,SAAS,CAACE,GAAjB;AACD,K,CAED;AACA;;;;wBAbU;AACR;AACA;AACA,aAAO,KAAKC,KAAL,CAAW,KAAK9B,KAAhB,CAAP;AACD;;;gCAUkB+B,K,EAAOC,I,EAAsB;AAAA,UAAhBC,MAAgB,uEAAP,KAAO;;AAC9C,UAAIF,KAAK,KAAKG,SAAd,EAAyB;AACvB,YAAID,MAAJ,EAAY;AACV,iBAAOD,IAAP;AACD;AACF,OAJD,MAIO,IAAIC,MAAM,IAAKF,KAAK,KAAKC,IAAzB,EAAgC;AACrC,eAAOD,KAAK,CAACI,QAAN,EAAP;AACD;;AACD,aAAOD,SAAP;AACD;;;sCAEwBH,K,EAAOC,I,EAAsB;AAAA,UAAhBC,MAAgB,uEAAP,KAAO;AACpD,aAAOrC,SAAS,CAACwC,WAAV,CAAsBL,KAAtB,EAA6BC,IAA7B,EAAmCC,MAAnC,CAAP;AACD;;;kCAEoBI,I,EAAML,I,EAAM;AAC/B,aAAOK,IAAI,KAAKH,SAAT,GAAqBF,IAArB,GAA4BK,IAAnC;AACD;;;oCAEsBN,K,EAAOC,I,EAAsB;AAAA,UAAhBC,MAAgB,uEAAP,KAAO;;AAClD,UAAIF,KAAK,KAAKG,SAAd,EAAyB;AACvB,YAAID,MAAJ,EAAY;AACV,iBAAOD,IAAP;AACD;AACF,OAJD,MAIO,IAAIC,MAAM,IAAKF,KAAK,KAAKC,IAAzB,EAAgC;AACrC,eAAOD,KAAK,GAAG,GAAH,GAAS,GAArB;AACD;;AACD,aAAOG,SAAP;AACD;;;gCAEkBG,I,EAAML,I,EAAM;AAC7B,aAAOK,IAAI,KAAKH,SAAT,GAAqBF,IAArB,GAA4BK,IAAI,KAAK,GAA5C;AACD;;;mCAEqBN,K,EAAOC,I,EAAsB;AAAA,UAAhBC,MAAgB,uEAAP,KAAO;AACjD,aAAOrC,SAAS,CAACwC,WAAV,CAAsBL,KAAtB,EAA6BC,IAA7B,EAAmCC,MAAnC,CAAP;AACD;;;+BAEiBI,I,EAAML,I,EAAM;AAC5B,aAAOK,IAAI,KAAKH,SAAT,GAAqBF,IAArB,GAA4BM,QAAQ,CAACD,IAAD,EAAO,EAAP,CAA3C;AACD;;;qCAEuBN,K,EAAOC,I,EAAsB;AAAA,UAAhBC,MAAgB,uEAAP,KAAO;AACnD,aAAOrC,SAAS,CAACwC,WAAV,CAAsBL,KAAtB,EAA6BC,IAA7B,EAAmCC,MAAnC,CAAP;AACD;;;iCAEmBI,I,EAAML,I,EAAM;AAC9B,aAAOK,IAAI,KAAKH,SAAT,GAAqBF,IAArB,GAA4BO,UAAU,CAACF,IAAD,CAA7C;AACD;;;;;;AAGHG,MAAM,CAACC,OAAP,GAAiB7C,SAAjB","sourcesContent":["const SAXStream = require('../../utils/sax-stream');\nconst XmlStream = require('../../utils/xml-stream');\n\n/* 'virtual' methods used as a form of documentation */\n/* eslint-disable class-methods-use-this */\n\n// Base class for Xforms\nclass BaseXform {\n  // constructor(/* model, name */) {}\n\n  // ============================================================\n  // Virtual Interface\n  prepare(/* model, options */) {\n    // optional preparation (mutation) of model so it is ready for write\n  }\n\n  render(/* xmlStream, model */) {\n    // convert model to xml\n  }\n\n  parseOpen(node) {\n    // XML node opened\n  }\n\n  parseText(text) {\n    // chunk of text encountered for current node\n  }\n\n  parseClose(name) {\n    // XML node closed\n  }\n\n  reconcile(model, options) {\n    // optional post-parse step (opposite to prepare)\n  }\n\n  // ============================================================\n  reset() {\n    // to make sure parses don't bleed to next iteration\n    this.model = null;\n\n    // if we have a map - reset them too\n    if (this.map) {\n      Object.values(this.map).forEach(xform => {\n        if (xform instanceof BaseXform) {\n          xform.reset();\n        } else if (xform.xform) {\n          xform.xform.reset();\n        }\n      });\n    }\n  }\n\n  mergeModel(obj) {\n    // set obj's props to this.model\n    this.model = Object.assign(this.model || {}, obj);\n  }\n\n  parse(saxStream, stream) {\n    return new Promise((resolve, reject) => {\n      const abort = error => {\n        // Abandon ship! Prevent the parser from consuming any more resources\n        saxStream.sax.off('opentag');\n        saxStream.sax.off('text');\n        saxStream.sax.off('closetag');\n        saxStream.sax.off('error');\n        saxStream.sax.off('end');\n        saxStream.sax.on('error', () => {}); // Ignore any parse errors from the chunk being processed\n        if (stream) {\n          stream.unpipe(saxStream);\n        }\n        reject(error);\n      };\n\n      saxStream.sax.on('opentag', node => {\n        try {\n          this.parseOpen(node);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      saxStream.sax.on('text', text => {\n        try {\n          this.parseText(text);\n        } catch (error) {\n          abort(error);\n        }\n      });\n      saxStream.sax.on('closetag', node => {\n        try {\n          if (!this.parseClose(node.name)) {\n            resolve(this.model);\n          }\n        } catch (error) {\n          abort(error);\n        }\n      });\n      saxStream.sax.on('end', () => {\n        resolve(this.model);\n      });\n      saxStream.sax.on('error', error => {\n        abort(error);\n      });\n    });\n  }\n\n  parseStream(stream) {\n    const saxStream = new SAXStream();\n    const promise = this.parse(saxStream, stream);\n    stream.pipe(saxStream);\n\n    return promise;\n  }\n\n  get xml() {\n    // convenience function to get the xml of this.model\n    // useful for manager types that are built during the prepare phase\n    return this.toXml(this.model);\n  }\n\n  toXml(model) {\n    const xmlStream = new XmlStream();\n    this.render(xmlStream, model);\n    return xmlStream.xml;\n  }\n\n  // ============================================================\n  // Useful Utilities\n  static toAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || (value !== dflt)) {\n      return value.toString();\n    }\n    return undefined;\n  }\n\n  static toStringAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toStringValue(attr, dflt) {\n    return attr === undefined ? dflt : attr;\n  }\n\n  static toBoolAttribute(value, dflt, always = false) {\n    if (value === undefined) {\n      if (always) {\n        return dflt;\n      }\n    } else if (always || (value !== dflt)) {\n      return value ? '1' : '0';\n    }\n    return undefined;\n  }\n\n  static toBoolValue(attr, dflt) {\n    return attr === undefined ? dflt : attr === '1';\n  }\n\n  static toIntAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toIntValue(attr, dflt) {\n    return attr === undefined ? dflt : parseInt(attr, 10);\n  }\n\n  static toFloatAttribute(value, dflt, always = false) {\n    return BaseXform.toAttribute(value, dflt, always);\n  }\n\n  static toFloatValue(attr, dflt) {\n    return attr === undefined ? dflt : parseFloat(attr);\n  }\n}\n\nmodule.exports = BaseXform;\n"],"file":"base-xform.js"}